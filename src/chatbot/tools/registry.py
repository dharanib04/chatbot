from typing import Dict, List, Any
from openai.types.chat import ChatCompletionToolParam
from .base import Tool

class ToolRegistry:
    """
    A registry to manage and access all available tools.
    This pattern allows for easy extension by simply adding new tool classes.
    """
    def __init__(self):
        self._tools: Dict[str, Tool] = {}

    def register(self, tool: Tool):
        """Registers a new tool."""
        if tool.name in self._tools:
            raise ValueError(f"Tool with name '{tool.name}' is already registered.")
        self._tools[tool.name] = tool

    def get_tool(self, name: str) -> Tool | None:
        """Retrieves a tool by its name."""
        return self._tools.get(name)

    def get_all_tools(self) -> List[Tool]:
        """Returns a list of all registered tools."""
        return list(self._tools.values())

    def get_all_schemas(self) -> List[ChatCompletionToolParam]:
        """Returns the schemas of all registered tools for the OpenAI API."""
        # The schema generated by each tool already matches the ChatCompletionToolParam structure.
        # We are just making the type hint explicit for the type checker.
        return [tool.get_schema() for tool in self.get_all_tools()] # type: ignore